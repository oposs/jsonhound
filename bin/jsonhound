#!/usr/bin/env raku
use JSON::Fast;
use JsonHound::DebugMode;
use JsonHound::Reporter::Compound;
use JsonHound::Reporter::CLI;
use JsonHound::Reporter::Nagios;
use JsonHound::Reporter::Syslog;
use JsonHound::RuleSet;

sub MAIN(
        $validations,   #= Path to module specifying the validation to apply
        *@json-files,   #= The JSON file(s) to validate
        Str :$reporter, #= Which reporter(s) to use, comma-separated (nagios,cli,syslog)
        Str :$debug     #= What debug messages to produce (none, failed, all)
        ) {
    my $*JSON-HOUND-RULESET = JsonHound::RuleSet.new;
    my $rule-file = $validations.IO;
    CompUnit::RepositoryRegistry.use-repository:
            CompUnit::RepositoryRegistry.repository-for-spec($rule-file.parent.absolute);
    require "$rule-file.basename()";
    my $debug-mode = debug-mode($debug);

    # We process the input files in parallel, but then do reporting of those
    # results one at a time. The `map` produces closures that are invoked with
    # the reporter; the `for` enforces one-at-a-time behavior. This means that
    # reporters don't need to account for concurrency.
    my $reporter-object = build-reporter($reporter);
    .($reporter-object) for @json-files.race(:1batch).map: -> $file {
        with slurp($file) -> $json {
            with try from-json($json) -> $parsed {
                my $result = $*JSON-HOUND-RULESET.validate($parsed, :debug($debug-mode));
                my @debug-messages = $result.debug-messages;
                if $result.violations -> @violations {
                    *.validation-error($file, @violations, :@debug-messages);
                }
                else {
                    *.ok($file, :@debug-messages);
                }
            }
            else {
                *.file-error($file, "invalid JSON: $!");
            }
        }
        else {
            *.file-error($file, "file not found");
        }
    };
    $reporter-object.finalize;
    exit($reporter-object.exit-code // 0);
}

sub debug-mode($debug) {
    given $debug || 'none' {
        when 'none' {
            JsonHound::DebugMode::None
        }
        when 'failed' {
            JsonHound::DebugMode::Failed
        }
        when 'all' {
            JsonHound::DebugMode::All
        }
        default {
            note "Invalid debug mode '$_'";
            exit 1;
        }
    }
}

sub build-reporter($reporter) {
    my @reporters = do for ($reporter // 'cli').split(',') {
        when 'cli' {
            JsonHound::Reporter::CLI.new
        }
        when 'nagios' {
            JsonHound::Reporter::Nagios.new
        }
        when 'syslog' {
            JsonHound::Reporter::Syslog.new
        }
        default {
            note "No such reporter '$_'";
            exit 1;
        }
    }
    return @reporters == 1
            ?? @reporters[0]
            !! JsonHound::Reporter::Compound.new(:@reporters);
}
